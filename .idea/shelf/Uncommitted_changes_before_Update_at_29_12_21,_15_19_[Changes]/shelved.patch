Index: Chat/src/main/java1/Messages/Adopter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Messages;\nimport com.google.gson.Gson;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class Adopter {\n\n    public static Gson gson;\n\n    /**\n     * java Object to json String\n     * @param message\n     * @return Json String\n     */\n//    public static String javabeanToJson(Message message) {\n//        String jsonBody = getJsonBody(message);\n//        String final_json = \"\";\n//        if (jsonBody.equals(\"MessageBody ist leer!\")){\n//            final_json = \"{ \\\"messageType\\\": \\\"\" + message.getMessageType() + \"\\\", \\\"messageBody\\\": { }}\";\n//        }\n//        else {\n//            gson = new Gson();\n//            String jsonType = gson.toJson(message);\n//            Object[] keys = message.messageBody.getkeys();\n//            for (Object k: keys){\n//                String key = (String) k;\n//                jsonType = jsonType.replaceFirst(\"content\", key);\n//            }\n//            int index = jsonType.indexOf(\"\\\"messageBody\");\n//            jsonType = jsonType.substring(0,index);\n//            String messageType = message.getMessageType();\n//            jsonBody = jsonBody.replaceFirst(messageType, \"messageBody\");\n//            jsonBody = jsonBody.substring(1);\n//            final_json = new StringBuilder(jsonType).append(jsonBody).toString();\n//        }\n//\n//        return final_json;\n//    }\n\n\n    public static String javabeanToJson(Message message) {\n        String jsonBody = getJsonBody(message);\n        String final_json = \"\";\n        if (jsonBody.equals(\"MessageBody ist leer!\")){\n            final_json = \"{ \\\"messageType\\\": \\\"\" + message.getMessageType() + \"\\\", \\\"messageBody\\\": { }}\";\n        }\n        else {\n            final_json = \"{ \\\"messageType\\\": \\\"\" + message.getMessageType() + \"\\\", \\\"messageBody\\\": \" + getJsonBody(message);\n        }\n\n        return final_json;\n    }\n\n    public static boolean checkForLetter(String value) {\n        boolean hasLetters = false;\n        for (char ch : value.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                hasLetters = true;\n                break;\n            }\n        }\n        return hasLetters;\n    }\n\n    public static String getJsonBody(Message message) {\n        String json = \"{ \";\n        Object[] keys = message.messageBody.getkeys();\n        Object[] values = message.messageBody.getContent();\n        if (keys != null && values != null) {\n            for (int i = 0; i < keys.length; i++) {\n                Object value = values[i];\n                String key = (String) keys[i];\n                if (value.toString().equals(\"true\") || value.toString().equals(\"false\") || !checkForLetter(value.toString())) {\n                json = json + \"\\\"\" + key + \"\\\": \"  + value + \", \";\n            } else {\n\n                json = json + \"\\\"\" + key + \"\\\": \\\"\"  + value + \"\\\"\" + \", \";\n            }}\n            StringBuilder sb = new StringBuilder(json);\n            json = sb.deleteCharAt(json.length()-1).toString();\n            sb = new StringBuilder(json);\n            json = sb.deleteCharAt(json.length()-1).toString();\n            json = json + \" }}\";\n        }\n        else {\n            json = \"MessageBody ist leer!\";\n        }\n\n        return json;\n    }\n\n    public static String insertString(\n            String originalString,\n            String stringToBeInserted,\n            int index)\n    {\n\n        // Create a new string\n        String newString = originalString.substring(0, index + 1)\n                + stringToBeInserted\n                + originalString.substring(index + 1);\n\n        // return the modified String\n        return newString;\n    }\n\n    private static int countOccurences(\n            String json, char searchedChar) {\n        int count = 0;\n        for (int i = 0; i < json.length(); i++) {\n            Character currentChar = json.charAt(i);\n            if (currentChar.equals(searchedChar) ) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n\n    private static String replaceFirstOccurences(\n            String json, char originalChar, String replacement) {\n        StringBuilder sb = new StringBuilder(json);\n        int index = json.indexOf(originalChar);\n        for (int i = 0; i < json.length(); i++) {\n            Character currentChar = json.charAt(i);\n            if (currentChar.equals(originalChar) ) {\n                json = sb.deleteCharAt(index).toString();\n                json = insertString(json, replacement, index-1);\n                break;\n            }\n        }\n        return json;\n    }\n\n    public static String jsonWithBrackets(String json) {\n        StringBuilder sb = new StringBuilder(json);\n        int count = countOccurences(json, '[');\n\n        for (int i = 0; i < count; i++) {\n            if (json.contains(\"[\")) {\n                int indexAuf = json.indexOf(\"[\");\n                int indexZu = json.indexOf(\"]\");\n                sb = new StringBuilder(json);\n                json = sb.deleteCharAt(indexAuf).toString();\n                json = insertString(json, \"[\", indexAuf);\n                json = replaceFirstOccurences(json, '[', \"%\");\n                sb = new StringBuilder(json);\n                json = sb.deleteCharAt(indexZu).toString();\n                json = insertString(json, \"]\", indexZu -2);\n                json = replaceFirstOccurences(json, ']', \"ยง\");\n            }\n        }\n        json = json.replace(\"%\", \"[\");\n        json = json.replace(\"ยง\", \"]\");\n        return json;\n    }\n\n    /**\n     *\n     * @param json\n     * @return message\n     */\n    public static Message getMessage(String json) {\n        Gson gson = new Gson();\n        Map map = gson.fromJson(json, Map.class);\n        Message message = new Message();\n        try {\n            String messageType = map.get(\"messageType\").toString();\n            Map messageBody = (Map) map.get(\"messageBody\");\n            Object[] content = new Object[messageBody.size()];\n            int i = 0;\n            for (Object value : messageBody.values()) {\n                    content[i] = value;\n                    i++;\n            }\n            MessageBody mbody = new MessageBody(content);\n            message.setMessageBody(mbody);\n            message.setMessageType(messageType);\n            return message;\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n\n\n    }\n\n\n    /**\n     *\n     * @param message\n     * @return M\n     */\n    public static Message adopterMessage(Message message) {\n        return new Gson().fromJson(new Gson().toJson((message.getMessageBody().toString())), Message.class);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Chat/src/main/java1/Messages/Adopter.java b/Chat/src/main/java1/Messages/Adopter.java
--- a/Chat/src/main/java1/Messages/Adopter.java	(revision a2e75108433cad5114fd170175d283a1b6411702)
+++ b/Chat/src/main/java1/Messages/Adopter.java	(date 1640020886297)
@@ -1,9 +1,7 @@
 package Messages;
 import com.google.gson.Gson;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 public class Adopter {
 
@@ -72,7 +70,13 @@
             for (int i = 0; i < keys.length; i++) {
                 Object value = values[i];
                 String key = (String) keys[i];
-                if (value.toString().equals("true") || value.toString().equals("false") || !checkForLetter(value.toString())) {
+                if (value instanceof String[] ) {
+                    System.out.println("Yeah");
+                }
+                else {
+                    System.out.println(value.getClass().getName());
+                }
+                if (value.toString().equals("null") || value.toString().equals("true") || value.toString().equals("false") || !checkForLetter(value.toString())) {
                 json = json + "\"" + key + "\": "  + value + ", ";
             } else {
 
Index: Chat/src/test/java/JSON/jsonTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package JSON;\n\nimport Messages.*;\nimport org.hamcrest.Condition;\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static junit.framework.Assert.assertEquals;\n\n\npublic class jsonTest {\n\n    @Test\n    public void test(){\n        assertEquals(true, true);\n    }\n\n    @Test\n    public void testZ(){\n\n        Message message = new HelloClient(\"Version 0.2\");\n        Object[] inhalt = message.getMessageBody().getContent();\n\n        Object string = (Object) inhalt[0];\n\n        assertEquals(string, \"Version 0.2\");\n\n    }\n\n\n    @Test\n    public void GsonTestWelcomeMessage(){\n        String string = \"{ \\\"messageType\\\": \\\"Welcome\\\", \\\"messageBody\\\": { \\\"clientID\\\": 42}}\";\n        Welcome m = new Welcome(42);\n\n        Message ergebnis = Adopter.getMessage(string);\n\n\n        assertEquals(ergebnis.getMessageBody().getContent(), m.getMessageBody().getContent());\n        assertEquals(ergebnis.getMessageType(), m.getMessageType());\n    }\n    @Test\n    public void GsonTestHelloServer(){\n        String string = \"{ \\\"messageType\\\": \\\"HelloServer\\\", \\\"messageBody\\\": { \\\"group\\\": \\\"TolleTrolle\\\", \\\"isAI\\\": false,\\\"protocol\\\":\\\"Version 0.1\\\" }}\";\n        HelloServer m = new HelloServer(\"TolleTrolle\",false,\"Version 0.1\");\n\n        //m.getMessageBody().setKeys(keys);\n\n        Object[] erwartet = new Object[3];\n        erwartet = m.getMessageBody().getContent();\n        String erwartet1 = (String) erwartet[0];\n        Boolean erwartet2 = (Boolean) erwartet[1];\n        String erwartet3 = (String) erwartet[2];\n\n        Object[] feld = new Object[3];\n        //feld = ergebnis.getMessageBody().getContent();\n        String ergebnis1 = (String) feld[0];\n        Boolean ergebnis2 = (Boolean) feld[1];\n        String ergebnis3 = (String) feld[2];\n\n        assertEquals(erwartet1, ergebnis1);\n        System.out.println(erwartet1);\n        assertEquals(erwartet2, ergebnis2);\n        assertEquals(erwartet3, ergebnis3);\n        System.out.println(erwartet3);\n\n        String[] keys = {\"group\", \"isAI\", \"protocol\"};\n        m.getMessageBody().setKeys(keys);\n        System.out.println((String)m.getMessageBody().getContent()[0]);\n        System.out.println(Adopter.javabeanToJson(m));\n\n        HelloServer output = new HelloServer(\"II\", false, \"Version 0.2\");\n        String[] key = {\"group\", \"isAI\", \"protocol\"};\n        output.getMessageBody().setKeys(key);\n        String S = Adopter.javabeanToJson(output);\n        System.out.println(S);\n    }\n\n    @Test\n    public void GsonTestHalloClient(){\n        String string = \"{ \\\"messageType\\\": \\\"HelloClient\\\", \\\"messageBody\\\": { \\\"protocol\\\":\\\"Version 0.1\\\" }}\";\n        HelloClient m = new HelloClient(\"Version 0.1\");\n\n        Message ergebnis = Adopter.getMessage(string);\n\n\n        assertEquals(ergebnis.getMessageBody().getContent(), m.getMessageBody().getContent());\n        assertEquals(ergebnis.getMessageType(), m.getMessageType());\n    }\n\n    @Test\n    public void GsonTestAlive(){\n        String string = \"{ \\\"messageType\\\": \\\"Alive\\\", \\\"messageBody\\\": { }}\";\n        Alive m = new Alive();\n\n        String ergebnis = Adopter.javabeanToJson(m);\n\n\n        //String ergebnis = Adopter.javabeanToJson(m);\n        System.out.println(string);\n        System.out.println(ergebnis);\n\n\n //       assertEquals(ergebnis.getMessageBody().getContent(), m.getMessageBody().getContent());\n   //     assertEquals(ergebnis.getMessageType(), m.getMessageType());\n    }\n\n    @Test\n    public void GsonTestPlayerValues(){\n        String string = \"{ \\\"messageType\\\": \\\"PlayerValues\\\", \\\"messageBody\\\": { \\\"availableMaps\\\": [\\\"DizzyHighway\\\"],  \\\"availableMaps\\\": [\\\"DizzyHighway\\\"]}}\";\n        PlayerValues m = new PlayerValues(\"Nr. 5\",5);\n        Message ergebnis = Adopter.getMessage(string);\n\n\n\n        //assertEquals(ergebnis.getMessageBody().getContent(), m.getMessageBody().getContent());\n        //assertEquals(ergebnis.getMessageType(), m.getMessageType());\n    }\n    @Test\n    public void GsonTestSelectMap(){\n        String string = \"{ \\\"messageType\\\": \\\"PlayerValues\\\", \\\"messageBody\\\": { \\\"availableMaps\\\": \\\"DizzyHighway\\\",  \\\"avalableMaps\\\": \\\"DizzHighway\\\"}}\";\n        String[] map = new String[1];\n        map[0] = \"[DizzyHighway]\";\n        SelectMap m = new SelectMap(map);\n        Message ergebnis = Adopter.getMessage(string);\n\n\n        Object[] keys = new Object[1];\n        keys[0] = \"availableMaps\";\n        m.getMessageBody().setKeys(keys);\n        String ergebnis2 = Adopter.javabeanToJson(m);\n        System.out.println(ergebnis2);\n    }\n\n    @Test\n    public void GsonToJson(){\n        String[] map = new String[1];\n        map[0] = \"DizzyHighway\";\n        PlayerValues m = new PlayerValues(\"Nr. 5\",5);\n        Object[] keys = new Object[2];\n        keys[0] = \"clientID\";\n        keys[1] = \"figure\";\n        m.getMessageBody().setKeys(keys);\n        String ergebnis = Adopter.javabeanToJson(m);\n        System.out.println(ergebnis);\n    }\n\n    @Test\n    public void GsonToJsonSelectMap2(){\n        String[] map = new String[1];\n        map[0] = \"DizzyHighway\";\n        String[] keys = new String[1];\n        keys[0] = \"availableMaps\";\n\n        SelectMap toParse = new SelectMap(map);\n        toParse.getMessageBody().setKeys(keys);\n\n        String expected = \"{\\\"messageType\\\":\\\"SelectMap\\\",\\\"messageBody\\\":{\\\"availableMaps\\\":[\\\"DizzyHighway\\\"]}}\";\n        Message m = Adopter.getMessage(expected);\n        System.out.println(\"Erwartet: \" + expected);\n        String ergebnis = Adopter.javabeanToJson(toParse);\n        System.out.println(\"Ergebnis: \" + ergebnis);\n\n        assertEquals(expected, ergebnis);\n    }\n\n    @Test\n    public void helloClient(){\n        HelloClient message = new HelloClient(\"Version 0.2\");\n        String[] key = new String[1];\n        key[0] = \"protocol\";\n\n        message.getMessageBody().setKeys(key);\n        String toSend = Adopter.javabeanToJson(message);\n\n        System.out.println(toSend);\n    }\n\n    @Test\n    public void error1(){\n        Error1 error = new Error1(\"Testfehler\");\n        String[] key = {\"error\"};\n        error.getMessageBody().setKeys(key);\n        String ergebnis = Adopter.javabeanToJson(error);\n        System.out.println(ergebnis);\n    }\n\n    @Test\n    public void sendChat(){\n        SendChat message = new SendChat(\"Test\", 2000);\n        String[] key = {\"message\", \"to\"};\n        message.getMessageBody().setKeys(key);\n        String toSend = Adopter.javabeanToJson(message);\n        System.out.println(toSend);\n    }\n\n    @Test\n    public void alive(){\n        Alive alive = new Alive();\n        String ergebnis = Adopter.javabeanToJson(alive);\n        System.out.println(ergebnis);\n    }\n\n    @Test\n    public void PlayerValues(){\n        PlayerValues playerValues = new PlayerValues(\"Robert\", 5);\n        String[] keys = {\"name\", \"figure\"};\n        playerValues.getMessageBody().setKeys(keys);\n        String toSend = Adopter.javabeanToJson(playerValues);\n        System.out.println(toSend);\n    }\n\n    @Test\n    public void GameStarted(){\n        String map = \"{ \\\"messageType\\\": \\\"GameStarted\\\",\\\"messageBody\\\": {\\\"gameMap\\\": [[[{ \" +\n                \"\\\"type\\\": \\\"ConveyorBelt\\\",\\\"isOnBoard\\\": \\\"1B\\\",\\\"speed\\\": 2,\\\"orientations\\\": [\" +\n                \"\\\"top\\\",\\\"right\\\",\\\"bottom\\\"]}],[{\\\"type\\\": \\\"PushPanel\\\",\\\"isOnBoard\\\": \\\"1B\\\",\" +\n                    \"\\\"orientations\\\": [\\\"left\\\"],\\\"registers\\\": [2, 4]}]],[[{\\\"type\\\":\\\"Wall\\\",\" +\n                    \"\\\"isOnBoard\\\":\\\"4A\\\",\\\"orientations\\\":[\\\"top\\\",\\\"right\\\"]},{\\\"type\\\":\\\"Laser\\\",\" +\n                    \"\\\"isOnBoard\\\":\\\"4A\\\",\\\"orientations\\\":[\\\"bottom\\\"],\\\"count\\\":2}],[null]]]}}\";\n        Message m = Adopter.getMessage(map);\n       // GameStarted gs = new GameStarted(map);\n\n        System.out.println(m.getMessageBody().getContent());\n        //GameStarted message = new GameStarted();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Chat/src/test/java/JSON/jsonTest.java b/Chat/src/test/java/JSON/jsonTest.java
--- a/Chat/src/test/java/JSON/jsonTest.java	(revision a2e75108433cad5114fd170175d283a1b6411702)
+++ b/Chat/src/test/java/JSON/jsonTest.java	(date 1640020371468)
@@ -149,19 +149,23 @@
     @Test
     public void GsonToJsonSelectMap2(){
         String[] map = new String[1];
-        map[0] = "DizzyHighway";
+        String[] value = new String[2];
+        value[0] = "DizzyHighway";
+        value[1] = "right";
         String[] keys = new String[1];
         keys[0] = "availableMaps";
 
-        SelectMap toParse = new SelectMap(map);
+        SelectMap toParse = new SelectMap(value);
         toParse.getMessageBody().setKeys(keys);
 
-        String expected = "{\"messageType\":\"SelectMap\",\"messageBody\":{\"availableMaps\":[\"DizzyHighway\"]}}";
+        String expected = "{\"messageType\":\"SelectMap\",\"messageBody\":{\"availableMaps\":[\"DizzyHighway\", \"right\"]}}";
         Message m = Adopter.getMessage(expected);
+        System.out.println(toParse.getMessageBody().getContent());
         System.out.println("Erwartet: " + expected);
         String ergebnis = Adopter.javabeanToJson(toParse);
         System.out.println("Ergebnis: " + ergebnis);
 
+
         assertEquals(expected, ergebnis);
     }
 
